/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WishlistRouteImport } from './routes/wishlist'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HelpRouteImport } from './routes/help'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CheckoutRouteImport } from './routes/checkout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIdRouteImport } from './routes/products.$id'

const WishlistRoute = WishlistRouteImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CheckoutRoute = CheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdRoute = ProductsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ProductsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/checkout': typeof CheckoutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/privacy': typeof PrivacyRoute
  '/products': typeof ProductsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/products/$id': typeof ProductsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/checkout': typeof CheckoutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/privacy': typeof PrivacyRoute
  '/products': typeof ProductsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/products/$id': typeof ProductsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/checkout': typeof CheckoutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/orders': typeof OrdersRoute
  '/privacy': typeof PrivacyRoute
  '/products': typeof ProductsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/signup': typeof SignupRoute
  '/wishlist': typeof WishlistRoute
  '/products/$id': typeof ProductsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/checkout'
    | '/contact'
    | '/faq'
    | '/help'
    | '/login'
    | '/orders'
    | '/privacy'
    | '/products'
    | '/settings'
    | '/signup'
    | '/wishlist'
    | '/products/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/checkout'
    | '/contact'
    | '/faq'
    | '/help'
    | '/login'
    | '/orders'
    | '/privacy'
    | '/products'
    | '/settings'
    | '/signup'
    | '/wishlist'
    | '/products/$id'
  id:
    | '__root__'
    | '/'
    | '/checkout'
    | '/contact'
    | '/faq'
    | '/help'
    | '/login'
    | '/orders'
    | '/privacy'
    | '/products'
    | '/settings'
    | '/signup'
    | '/wishlist'
    | '/products/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CheckoutRoute: typeof CheckoutRoute
  ContactRoute: typeof ContactRoute
  FaqRoute: typeof FaqRoute
  HelpRoute: typeof HelpRoute
  LoginRoute: typeof LoginRoute
  OrdersRoute: typeof OrdersRoute
  PrivacyRoute: typeof PrivacyRoute
  ProductsRoute: typeof ProductsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  SignupRoute: typeof SignupRoute
  WishlistRoute: typeof WishlistRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/checkout': {
      id: '/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id': {
      id: '/products/$id'
      path: '/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdRouteImport
      parentRoute: typeof ProductsRoute
    }
  }
}

interface ProductsRouteChildren {
  ProductsIdRoute: typeof ProductsIdRoute
}

const ProductsRouteChildren: ProductsRouteChildren = {
  ProductsIdRoute: ProductsIdRoute,
}

const ProductsRouteWithChildren = ProductsRoute._addFileChildren(
  ProductsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CheckoutRoute: CheckoutRoute,
  ContactRoute: ContactRoute,
  FaqRoute: FaqRoute,
  HelpRoute: HelpRoute,
  LoginRoute: LoginRoute,
  OrdersRoute: OrdersRoute,
  PrivacyRoute: PrivacyRoute,
  ProductsRoute: ProductsRouteWithChildren,
  SettingsRoute: SettingsRoute,
  SignupRoute: SignupRoute,
  WishlistRoute: WishlistRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
